{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"MLUtils/obsview.jl","docid":"MLUtils@0.3.1/src/obsview.jl"},{"tag":"documentation","title":"shuffleobs","docid":"MLUtils@0.3.1/ref/MLUtils.shuffleobs"},{"tag":"sourcefile","title":"MLUtils/resample.jl","docid":"MLUtils@0.3.1/src/resample.jl"},{"tag":"sourcefile","title":"MLUtils/splitobs.jl","docid":"MLUtils@0.3.1/src/splitobs.jl"},{"tag":"sourcefile","title":"MLUtils/MLUtils.jl","docid":"MLUtils@0.3.1/src/MLUtils.jl"},{"tag":"documentation","title":"ObsView","docid":"MLUtils@0.3.1/ref/MLUtils.ObsView"},{"tag":"sourcefile","title":"MLUtils/folds.jl","docid":"MLUtils@0.3.1/src/folds.jl"},{"tag":"sourcefile","title":"MLUtils/utils.jl","docid":"MLUtils@0.3.1/src/utils.jl"},{"tag":"sourcefile","title":"MLUtils/obstransform.jl","docid":"MLUtils@0.3.1/src/obstransform.jl"}],"methods":[{"symbol_id":"MLUtils.obsview","module_id":"MLUtils","file":"obsview.jl","line":222,"signature":"(::Signature)"},{"symbol_id":"MLUtils.obsview","module_id":"MLUtils","file":"obsview.jl","line":224,"signature":"(::Signature)"},{"symbol_id":"MLUtils.obsview","module_id":"MLUtils","file":"obsview.jl","line":232,"signature":"(::Signature)"},{"symbol_id":"MLUtils.obsview","module_id":"MLUtils","file":"obsview.jl","line":218,"signature":"(::Signature)"}],"package_id":"MLUtils@0.3.1","title":"obsview","symbol_id":"MLUtils.obsview","exported":true,"module_id":"MLUtils"},"tag":"documentation","children":[{"attributes":{"symbol":"MLUtils.obsview","line":197,"module":"MLUtils","file":"obsview.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["obsview(data, [indices])\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Returns a lazy view of the observations in ",{"attributes":{},"tag":"code","children":["data"],"type":"node"}," that correspond to the given ",{"attributes":{},"tag":"code","children":["indices"],"type":"node"},". No data will be copied except of the indices. It is similar to constructing an ",{"attributes":{"reftype":"symbol","href":"@ref","title":"","document_id":"MLUtils@0.3.1/ref/MLUtils.ObsView"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["ObsView"],"type":"node"}],"type":"node"},", but returns a ",{"attributes":{},"tag":"code","children":["SubArray"],"type":"node"}," if the type of ",{"attributes":{},"tag":"code","children":["data"],"type":"node"}," is ",{"attributes":{},"tag":"code","children":["Array"],"type":"node"}," or ",{"attributes":{},"tag":"code","children":["SubArray"],"type":"node"},". Furthermore, this function may be extended for custom types of ",{"attributes":{},"tag":"code","children":["data"],"type":"node"}," that also want to provide their own subset-type."],"type":"node"},{"attributes":{},"tag":"p","children":["In case ",{"attributes":{},"tag":"code","children":["data"],"type":"node"}," is a tuple, the constructor will be mapped over its elements. That means that the constructor returns a tuple of ",{"attributes":{},"tag":"code","children":["ObsView"],"type":"node"}," instead of a ",{"attributes":{},"tag":"code","children":["ObsView"],"type":"node"}," of tuples."],"type":"node"},{"attributes":{},"tag":"p","children":["If instead you want to get the subset of observations corresponding to the given ",{"attributes":{},"tag":"code","children":["indices"],"type":"node"}," in their native type, use ",{"attributes":{},"tag":"code","children":["getobs"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["See ",{"attributes":{"reftype":"symbol","href":"@ref","title":"","document_id":"MLUtils@0.3.1/ref/MLUtils.ObsView"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["ObsView"],"type":"node"}],"type":"node"}," for more information."],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}