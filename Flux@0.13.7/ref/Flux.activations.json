{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"Flux/layers/basic.jl","docid":"Flux@0.13.7/src/layers/basic.jl"}],"methods":[{"symbol_id":"Flux.activations","module_id":"Flux","file":"layers/basic.jl","line":102,"signature":"(::Signature)"}],"package_id":"Flux@0.13.7","title":"activations","symbol_id":"Flux.activations","exported":false,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{"symbol":"Flux.activations","line":86,"module":"Flux","file":"layers/basic.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["activations(c::Chain, input)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Like calling a ",{"attributes":{},"tag":"code","children":["Chain"],"type":"node"},", but saves the result of each layer as an output."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> using Flux: activations\n\njulia> c = Chain(x -> x + 1, x -> x * 2, x -> x ^ 3);\n\njulia> activations(c, 1)\n(2, 4, 64)\n"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}