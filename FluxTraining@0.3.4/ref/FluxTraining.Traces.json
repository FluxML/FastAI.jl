{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"FluxTraining/callbacks/trace.jl","docid":"FluxTraining@0.3.4/src/callbacks/trace.jl"},{"tag":"documentation","title":"LogTraces","docid":"FluxTraining@0.3.4/ref/FluxTraining.LogTraces"},{"tag":"sourcefile","title":"FluxTraining/FluxTraining.jl","docid":"FluxTraining@0.3.4/src/FluxTraining.jl"}],"methods":[{"symbol_id":"FluxTraining.Traces","module_id":"FluxTraining","file":"callbacks/trace.jl","line":19,"signature":"(::Signature)"}],"package_id":"FluxTraining@0.3.4","title":"Traces","symbol_id":"FluxTraining.Traces","exported":true,"module_id":"FluxTraining"},"tag":"documentation","children":[{"attributes":{"symbol":"FluxTraining.Traces","line":1,"module":"FluxTraining","file":"callbacks/trace.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["Traces(preprocess[, phase])\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Record a trace during ",{"attributes":{},"tag":"code","children":["phase"],"type":"node"}," by apply each pre-processing function in ",{"attributes":{},"tag":"code","children":["preprocess"],"type":"node"}," to the ",{"attributes":{"reftype":"symbol","href":"#","title":"","document_id":"FluxTraining@0.3.4/ref/FluxTraining.Learner"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["Learner"],"type":"node"}],"type":"node"}," to produce a trace value. The trace is recorded at the end of each learning step."],"type":"node"},{"attributes":{},"tag":"p","children":["See ",{"attributes":{"reftype":"symbol","href":"#","title":"","document_id":"FluxTraining@0.3.4/ref/FluxTraining.LogTraces"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["LogTraces"],"type":"node"}],"type":"node"}," for logging of the trace values."],"type":"node"},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":["cb = Traces((loss2 = learner -> learner.step.loss^2,\n             avg_gnorm = learner -> mean(map((_, g) -> norm(g), pairs(learner.step.grads))))\n            TrainingPhase)"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}