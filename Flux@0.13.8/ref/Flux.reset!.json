{"attributes":{"kind":"function","backlinks":[{"tag":"documentation","title":"AbstractMetric","docid":"FluxTraining@0.3.4/ref/FluxTraining.AbstractMetric"},{"tag":"sourcefile","title":"Flux/layers/recurrent.jl","docid":"Flux@0.13.8/src/layers/recurrent.jl"}],"methods":[{"symbol_id":"Flux.reset!","module_id":"Flux","file":"layers/recurrent.jl","line":179,"signature":"(::Signature)"},{"symbol_id":"Flux.reset!","module_id":"Flux","file":"layers/recurrent.jl","line":180,"signature":"(::Signature)"}],"package_id":"Flux@0.13.8","title":"reset!","symbol_id":"Flux.reset!","exported":false,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{"symbol":"Flux.reset!","line":143,"module":"Flux","file":"layers/recurrent.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["reset!(rnn)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Reset the hidden state of a recurrent layer back to its original value."],"type":"node"},{"attributes":{},"tag":"p","children":["Assuming you have a ",{"attributes":{},"tag":"code","children":["Recur"],"type":"node"}," layer ",{"attributes":{},"tag":"code","children":["rnn"],"type":"node"},", this is roughly equivalent to:"],"type":"node"},{"attributes":{"lang":""},"tag":"codeblock","children":["rnn.state = hidden(rnn.cell)\n"],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> r = Flux.RNNCell(relu, ones(1,1), zeros(1,1), ones(1,1), zeros(1,1));  # users should use the RNN wrapper struct instead\n\njulia> y = Flux.Recur(r, ones(1,1));\n\njulia> y.state\n1×1 Matrix{Float64}:\n 1.0\n\njulia> y(ones(1,1))  # relu(1*1 + 1)\n1×1 Matrix{Float64}:\n 2.0\n\njulia> y.state\n1×1 Matrix{Float64}:\n 2.0\n\njulia> Flux.reset!(y)\n1×1 Matrix{Float64}:\n 0.0\n\njulia> y.state\n1×1 Matrix{Float64}:\n 0.0\n"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}