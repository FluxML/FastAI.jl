{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"Flux/Flux.jl","docid":"Flux@0.13.8/src/Flux.jl"},{"tag":"sourcefile","title":"Flux/layers/upsample.jl","docid":"Flux@0.13.8/src/layers/upsample.jl"}],"methods":[{"symbol_id":"Flux.Upsample","module_id":"Flux","file":"layers/upsample.jl","line":38,"signature":"(::Signature)"},{"symbol_id":"Flux.Upsample","module_id":"Flux","file":"layers/upsample.jl","line":47,"signature":"(::Signature)"}],"package_id":"Flux@0.13.8","title":"Upsample","symbol_id":"Flux.Upsample","exported":true,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{"symbol":"Flux.Upsample","line":1,"module":"Flux","file":"layers/upsample.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["Upsample(mode = :nearest; [scale, size]) \nUpsample(scale, mode = :nearest)  \n"],"type":"node"},{"attributes":{},"tag":"p","children":["An upsampling layer. One of two keywords must be given:"],"type":"node"},{"attributes":{},"tag":"p","children":["If ",{"attributes":{},"tag":"code","children":["scale"],"type":"node"}," is a number, this applies to all but the last two dimensions (channel and batch) of the input. It may also be a tuple, to control dimensions individually. Alternatively, keyword ",{"attributes":{},"tag":"code","children":["size"],"type":"node"}," accepts a tuple, to directly specify the leading dimensions of the output."],"type":"node"},{"attributes":{},"tag":"p","children":["Currently supported upsampling ",{"attributes":{},"tag":"code","children":["mode"],"type":"node"},"s and corresponding NNlib's methods are:"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":[":nearest"],"type":"node"}," -> ",{"attributes":{"href":"@ref","title":""},"tag":"a","children":[{"attributes":{},"tag":"code","children":["NNlib.upsample_nearest"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":[":bilinear"],"type":"node"}," -> ",{"attributes":{"href":"@ref","title":""},"tag":"a","children":[{"attributes":{},"tag":"code","children":["NNlib.upsample_bilinear"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":[":trilinear"],"type":"node"}," -> ",{"attributes":{"href":"@ref","title":""},"tag":"a","children":[{"attributes":{},"tag":"code","children":["NNlib.upsample_trilinear"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> m = Upsample(scale = (2, 3))\nUpsample(:nearest, scale = (2, 3))\n\njulia> m(ones(2, 2, 1, 1)) |> size\n(4, 6, 1, 1)\n\njulia> m = Upsample(:bilinear, size = (4, 5))\nUpsample(:bilinear, size = (4, 5))\n\njulia> m(ones(2, 2, 1, 1)) |> size\n(4, 5, 1, 1)\n"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}