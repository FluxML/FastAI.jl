{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"Flux/Flux.jl","docid":"Flux@0.13.6/src/Flux.jl"},{"tag":"sourcefile","title":"Flux/layers/normalise.jl","docid":"Flux@0.13.6/src/layers/normalise.jl"},{"tag":"documentation","title":"hasaffine","docid":"Flux@0.13.6/ref/Flux.hasaffine"},{"tag":"sourcefile","title":"Flux/outputsize.jl","docid":"Flux@0.13.6/src/outputsize.jl"},{"tag":"sourcefile","title":"Flux/layers/show.jl","docid":"Flux@0.13.6/src/layers/show.jl"},{"tag":"documentation","title":"LayerNorm","docid":"Flux@0.13.6/ref/Flux.LayerNorm"}],"methods":[{"symbol_id":"Flux.InstanceNorm","module_id":"Flux","file":"layers/normalise.jl","line":429,"signature":"(::Signature)"},{"symbol_id":"Flux.InstanceNorm","module_id":"Flux","file":"layers/normalise.jl","line":416,"signature":"(::Signature)"}],"package_id":"Flux@0.13.6","title":"InstanceNorm","symbol_id":"Flux.InstanceNorm","exported":true,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{"symbol":"Flux.InstanceNorm","line":377,"module":"Flux","file":"layers/normalise.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["InstanceNorm(channels::Integer, λ=identity;\n             initβ=zeros32, initγ=ones32,\n             affine=false, track_stats=false,\n             ϵ=1f-5, momentum=0.1f0)\n"],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{"href":"https://arxiv.org/abs/1607.08022","title":""},"tag":"a","children":["Instance Normalization"],"type":"node"}," layer. ",{"attributes":{},"tag":"code","children":["channels"],"type":"node"}," should be the size of the channel dimension in your data (see below)."],"type":"node"},{"attributes":{},"tag":"p","children":["Given an array with ",{"attributes":{},"tag":"code","children":["N > 2"],"type":"node"}," dimensions, call the ",{"attributes":{},"tag":"code","children":["N-1"],"type":"node"},"th the channel dimension. For ",{"attributes":{},"tag":"code","children":["WHCN"],"type":"node"}," images it's the usual channel dimension."],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["InstanceNorm"],"type":"node"}," computes the mean and variance for each ",{"attributes":{},"tag":"code","children":["D_1×...×D_{N-2}×1×1"],"type":"node"}," input slice and normalises the input accordingly."],"type":"node"},{"attributes":{},"tag":"p","children":["If ",{"attributes":{},"tag":"code","children":["affine=true"],"type":"node"},", it also applies  a shift and a rescale to the input through to learnable per-channel bias ",{"attributes":{},"tag":"code","children":["β"],"type":"node"}," and scale ",{"attributes":{},"tag":"code","children":["γ"],"type":"node"}," parameters."],"type":"node"},{"attributes":{},"tag":"p","children":["If ",{"attributes":{},"tag":"code","children":["track_stats=true"],"type":"node"},", accumulates mean and var statistics in training phase that will be used to renormalize the input in test phase."],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"strong","children":["Warning"],"type":"node"},": the defaults for ",{"attributes":{},"tag":"code","children":["affine"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["track_stats"],"type":"node"}," used to be ",{"attributes":{},"tag":"code","children":["true"],"type":"node"}," in previous Flux versions (< v0.12)."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> using Statistics\n\njulia> xs = rand(3, 3, 3, 2);  # a batch of 2 images, each having 3 channels\n\njulia> m = InstanceNorm(3);\n\njulia> y = m(xs);\n\njulia> isapprox(std(y, dims=1:2), ones(1, 1, 3, 2), atol=0.2) && std(y, dims=1:2) != std(xs, dims=1:2)\ntrue\n"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}