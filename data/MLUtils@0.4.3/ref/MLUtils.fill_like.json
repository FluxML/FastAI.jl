{"attributes":{"kind":"function","backlinks":[{"tag":"documentation","title":"ones_like","docid":"MLUtils@0.4.3/ref/MLUtils.ones_like"},{"tag":"sourcefile","title":"MLUtils/MLUtils.jl","docid":"MLUtils@0.4.3/src/MLUtils.jl"},{"tag":"documentation","title":"zeros_like","docid":"MLUtils@0.4.3/ref/MLUtils.zeros_like"},{"tag":"sourcefile","title":"MLUtils/utils.jl","docid":"MLUtils@0.4.3/src/utils.jl"}],"methods":[{"symbol_id":"MLUtils.fill_like","module_id":"MLUtils","file":"utils.jl","line":734,"signature":"(::Signature)"},{"symbol_id":"MLUtils.fill_like","module_id":"MLUtils","file":"utils.jl","line":733,"signature":"(::Signature)"}],"package_id":"MLUtils@0.4.3","title":"fill_like","symbol_id":"MLUtils.fill_like","exported":true,"module_id":"MLUtils"},"tag":"documentation","children":[{"attributes":{"symbol":"MLUtils.fill_like","line":696,"module":"MLUtils","file":"utils.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["fill_like(x, val, [element_type=eltype(x)], [dims=size(x)]))\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Create an array with the given element type and size, based upon the given source array ",{"attributes":{},"tag":"code","children":["x"],"type":"node"},". All element of the new array will be set to ",{"attributes":{},"tag":"code","children":["val"],"type":"node"},". The third and fourth arguments are both optional, defaulting to the given array's eltype and size. The dimensions may be specified as an integer or as a tuple argument."],"type":"node"},{"attributes":{},"tag":"p","children":["See also ",{"attributes":{"reftype":"symbol","href":"@ref","title":"","document_id":"MLUtils@0.4.3/ref/MLUtils.zeros_like"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["zeros_like"],"type":"node"}],"type":"node"}," and ",{"attributes":{"reftype":"symbol","href":"@ref","title":"","document_id":"MLUtils@0.4.3/ref/MLUtils.ones_like"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["ones_like"],"type":"node"}],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"julia-repl"},"tag":"codeblock","children":["julia> x = rand(Float32, 2)\n2-element Vector{Float32}:\n 0.16087806\n 0.89916044\n\njulia> fill_like(x, 1.7, (3, 3))\n3×3 Matrix{Float32}:\n 1.7  1.7  1.7\n 1.7  1.7  1.7\n 1.7  1.7  1.7\n\njulia> using CUDA\n\njulia> x = CUDA.rand(2, 2)\n2×2 CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}:\n 0.803167  0.476101\n 0.303041  0.317581\n\njulia> fill_like(x, 1.7, Float64)\n2×2 CuArray{Float64, 2, CUDA.Mem.DeviceBuffer}:\n 1.7  1.7\n 1.7  1.7\n"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}