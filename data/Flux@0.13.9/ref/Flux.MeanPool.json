{"attributes":{"kind":"struct","backlinks":[{"tag":"documentation","title":"MaxPool","docid":"Flux@0.13.9/ref/Flux.MaxPool"},{"tag":"sourcefile","title":"Flux/Flux.jl","docid":"Flux@0.13.9/src/Flux.jl"},{"tag":"sourcefile","title":"FastVision/models/xresnet.jl","docid":"FastVision@0.1.0/src/models/xresnet.jl"},{"tag":"sourcefile","title":"Flux/layers/conv.jl","docid":"Flux@0.13.9/src/layers/conv.jl"}],"methods":[{"symbol_id":"Flux.MeanPool","module_id":"Flux","file":"layers/conv.jl","line":735,"signature":"(::Signature)"},{"symbol_id":"Flux.MeanPool","module_id":"Flux","file":"layers/conv.jl","line":740,"signature":"(::Signature)"}],"package_id":"Flux@0.13.9","title":"MeanPool","symbol_id":"Flux.MeanPool","exported":true,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{"symbol":"Flux.MeanPool","line":702,"module":"Flux","file":"layers/conv.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["MeanPool(window::NTuple; pad=0, stride=window)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Mean pooling layer, averaging all pixels in a block of size ",{"attributes":{},"tag":"code","children":["window"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["Expects as input an array with ",{"attributes":{},"tag":"code","children":["ndims(x) == N+2"],"type":"node"},", i.e. channel and batch dimensions, after the ",{"attributes":{},"tag":"code","children":["N"],"type":"node"}," feature dimensions, where ",{"attributes":{},"tag":"code","children":["N = length(window)"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["By default the window size is also the stride in each dimension. The keyword ",{"attributes":{},"tag":"code","children":["pad"],"type":"node"}," accepts the same options as for the ",{"attributes":{},"tag":"code","children":["Conv"],"type":"node"}," layer, including ",{"attributes":{},"tag":"code","children":["SamePad()"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["See also ",{"attributes":{"reftype":"symbol","href":"@ref","title":"","document_id":"Flux@0.13.9/ref/Flux.Conv"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["Conv"],"type":"node"}],"type":"node"},", ",{"attributes":{"reftype":"symbol","href":"@ref","title":"","document_id":"Flux@0.13.9/ref/Flux.MaxPool"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["MaxPool"],"type":"node"}],"type":"node"},", ",{"attributes":{"reftype":"symbol","href":"@ref","title":"","document_id":"Flux@0.13.9/ref/Flux.AdaptiveMeanPool"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["AdaptiveMeanPool"],"type":"node"}],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> xs = rand(Float32, 100, 100, 3, 50);\n\njulia> m = Chain(Conv((5,5), 3 => 7), MeanPool((5,5), pad=SamePad()))\nChain(\n  Conv((5, 5), 3 => 7),                 # 532 parameters\n  MeanPool((5, 5), pad=2),\n)\n\njulia> m[1](xs) |> size\n(96, 96, 7, 50)\n\njulia> m(xs) |> size\n(20, 20, 7, 50)\n"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}