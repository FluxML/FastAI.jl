{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"Flux/utils.jl","docid":"Flux@0.13.9/src/utils.jl"}],"methods":[{"symbol_id":"Flux.nfan","module_id":"Flux","file":"utils.jl","line":27,"signature":"(::Signature)"},{"symbol_id":"Flux.nfan","module_id":"Flux","file":"utils.jl","line":30,"signature":"(::Signature)"},{"symbol_id":"Flux.nfan","module_id":"Flux","file":"utils.jl","line":28,"signature":"(::Signature)"},{"symbol_id":"Flux.nfan","module_id":"Flux","file":"utils.jl","line":29,"signature":"(::Signature)"},{"symbol_id":"Flux.nfan","module_id":"Flux","file":"utils.jl","line":31,"signature":"(::Signature)"}],"package_id":"Flux@0.13.9","title":"nfan","symbol_id":"Flux.nfan","exported":false,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{"symbol":"Flux.nfan","line":2,"module":"Flux","file":"utils.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["nfan(n_out, n_in=1) -> Tuple\nnfan(dims...)\nnfan(dims::Tuple)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["For a layer characterized by dimensions ",{"attributes":{},"tag":"code","children":["dims"],"type":"node"},", return a tuple ",{"attributes":{},"tag":"code","children":["(fan_in, fan_out)"],"type":"node"},", where ",{"attributes":{},"tag":"code","children":["fan_in"],"type":"node"}," is the number of input neurons connected to an output one, and ",{"attributes":{},"tag":"code","children":["fan_out"],"type":"node"}," is the number of output neurons connected to an input one."],"type":"node"},{"attributes":{},"tag":"p","children":["This function is mainly used by weight initializers, e.g., [",{"attributes":{},"tag":"code","children":["kaiming_normal"],"type":"node"},"](",{"attributes":{},"tag":"citation","children":[],"type":"node"}," Flux.kaiming_normal)."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> layer = Dense(10, 20);\n\njulia> Flux.nfan(size(layer.weight))\n(10, 20)\n\njulia> layer = Conv((3, 3), 2=>10);\n\njulia> Flux.nfan(size(layer.weight))\n(18, 90)\n"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}