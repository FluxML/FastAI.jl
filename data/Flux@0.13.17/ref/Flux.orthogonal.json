{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"Flux/utils.jl","docid":"Flux@0.13.17/src/utils.jl"}],"methods":[{"symbol_id":"Flux.orthogonal","module_id":"Flux","file":"utils.jl","line":329,"signature":"(::Signature)"},{"symbol_id":"Flux.orthogonal","module_id":"Flux","file":"utils.jl","line":311,"signature":"(::Signature)"},{"symbol_id":"Flux.orthogonal","module_id":"Flux","file":"utils.jl","line":321,"signature":"(::Signature)"},{"symbol_id":"Flux.orthogonal","module_id":"Flux","file":"utils.jl","line":328,"signature":"(::Signature)"}],"package_id":"Flux@0.13.17","title":"orthogonal","symbol_id":"Flux.orthogonal","exported":false,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{"symbol":"Flux.orthogonal","line":272,"module":"Flux","file":"utils.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["orthogonal([rng = default_rng_value()], size...; gain = 1) -> Array\northogonal([rng]; kw...) -> Function\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Return an ",{"attributes":{},"tag":"code","children":["Array{Float32}"],"type":"node"}," of the given ",{"attributes":{},"tag":"code","children":["size"],"type":"node"}," which is a (semi) orthogonal matrix, as described in [1]."],"type":"node"},{"attributes":{},"tag":"p","children":["Cannot construct a vector, i.e. ",{"attributes":{},"tag":"code","children":["length(size) == 1"],"type":"node"}," is forbidden. For ",{"attributes":{},"tag":"code","children":["length(size) > 2"],"type":"node"},", a ",{"attributes":{},"tag":"code","children":["prod(size[1:(end - 1)])"],"type":"node"}," by ",{"attributes":{},"tag":"code","children":["size[end]"],"type":"node"}," orthogonal matrix is computed before reshaping it to the original dimensions."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest; setup = :(using LinearAlgebra)"},"tag":"codeblock","children":["julia> W = Flux.orthogonal(5, 7);\n\njulia> summary(W)\n\"5×7 Matrix{Float32}\"\n\njulia> W * W' ≈ I(5)\ntrue\n\njulia> W2 = Flux.orthogonal(7, 5);\n\njulia> W2 * W2' ≈ I(7)\nfalse\n\njulia> W2' * W2 ≈ I(5)\ntrue\n\njulia> W3 = Flux.orthogonal(3, 3, 2, 4);\n\njulia> transpose(reshape(W3, :, 4)) * reshape(W3, :, 4) ≈ I(4)\ntrue\n"],"type":"node"},{"attributes":{},"tag":"h1","children":["References"],"type":"node"},{"attributes":{},"tag":"p","children":["[1] Saxe, McClelland, Ganguli. \"Exact solutions to the nonlinear dynamics of learning in deep linear neural networks\", ICLR 2014, https://arxiv.org/abs/1312.6120"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}