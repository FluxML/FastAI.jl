{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"Flux/src/Flux.jl","docid":"sourcefiles/Flux/src/Flux.jl"},{"tag":"sourcefile","title":"Flux/src/layers/conv.jl","docid":"sourcefiles/Flux/src/layers/conv.jl"}],"methods":[{"line":371,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/conv.jl","method_id":"Flux.DepthwiseConv_1","symbol_id":"Flux.DepthwiseConv","filedoc":"sourcefiles/Flux/src/layers/conv.jl","signature":"DepthwiseConv(k::Tuple{Vararg{Integer, var\"#s127\"}} where var\"#s127\", ch::Pair{<:Integer, <:Integer})"},{"line":371,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/conv.jl","method_id":"Flux.DepthwiseConv_2","symbol_id":"Flux.DepthwiseConv","filedoc":"sourcefiles/Flux/src/layers/conv.jl","signature":"DepthwiseConv(k::Tuple{Vararg{Integer, var\"#s124\"}} where var\"#s124\", ch::Pair{<:Integer, <:Integer}, σ; stride, pad, dilation, bias, init)"},{"line":376,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/conv.jl","method_id":"Flux.DepthwiseConv_3","symbol_id":"Flux.DepthwiseConv","filedoc":"sourcefiles/Flux/src/layers/conv.jl","signature":"DepthwiseConv(w::AbstractArray{T, N})"},{"line":376,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/conv.jl","method_id":"Flux.DepthwiseConv_4","symbol_id":"Flux.DepthwiseConv","filedoc":"sourcefiles/Flux/src/layers/conv.jl","signature":"DepthwiseConv(w::AbstractArray{T, N}, bias)"},{"line":376,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/conv.jl","method_id":"Flux.DepthwiseConv_5","symbol_id":"Flux.DepthwiseConv","filedoc":"sourcefiles/Flux/src/layers/conv.jl","signature":"DepthwiseConv(w::AbstractArray{T, N}, bias, σ; stride, pad, dilation)"}],"name":"DepthwiseConv","title":"DepthwiseConv","symbol_id":"Flux.DepthwiseConv","public":true,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["DepthwiseConv(filter, in => out, σ=identity; stride=1, pad=0, dilation=1, [bias, init])\nDepthwiseConv(weight::AbstractArray, [bias, activation; stride, pad, dilation])\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Return a depthwise convolutional layer, that is a ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["Conv"],"type":"node"}],"type":"node"}," layer with number of groups equal to the number of input channels."],"type":"node"},{"attributes":{},"tag":"p","children":["See ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["Conv"],"type":"node"}],"type":"node"}," for a description of the arguments."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> xs = rand(Float32, 100, 100, 3, 50);  # a batch of 50 RGB images\n\njulia> layer = DepthwiseConv((5,5), 3 => 6, relu; bias=false)\nConv((5, 5), 3 => 6, relu, groups=3, bias=false)  # 150 parameters \n\njulia> layer(xs) |> size\n(96, 96, 6, 50)\n\njulia> DepthwiseConv((5, 5), 3 => 9, stride=2, pad=2)(xs) |> size\n(50, 50, 9, 50)\n"],"type":"node"}],"type":"node"}],"type":"node"}