{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"Flux/src/deprecations.jl","docid":"sourcefiles/Flux/src/deprecations.jl"},{"tag":"sourcefile","title":"Flux/src/layers/basic.jl","docid":"sourcefiles/Flux/src/layers/basic.jl"},{"tag":"sourcefile","title":"FastTabular/src/models.jl","docid":"sourcefiles/FastTabular/src/models.jl"},{"tag":"sourcefile","title":"Flux/src/layers/show.jl","docid":"sourcefiles/Flux/src/layers/show.jl"},{"tag":"sourcefile","title":"FastTabular/src/FastTabular.jl","docid":"sourcefiles/FastTabular/src/FastTabular.jl"}],"methods":[{"line":67,"file":"/home/runner/.julia/packages/Flux/KkC79/src/deprecations.jl","method_id":"Flux.Embedding_1","symbol_id":"Flux.Embedding","filedoc":"sourcefiles/Flux/src/deprecations.jl","signature":"Flux.Embedding(in::Integer, out::Integer; kw...)"},{"line":681,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/basic.jl","method_id":"Flux.Embedding_2","symbol_id":"Flux.Embedding","filedoc":"sourcefiles/Flux/src/layers/basic.jl","signature":"Flux.Embedding(::Pair{<:Integer, <:Integer}; init)"},{"line":676,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/basic.jl","method_id":"Flux.Embedding_3","symbol_id":"Flux.Embedding","filedoc":"sourcefiles/Flux/src/layers/basic.jl","signature":"Flux.Embedding(weight::W)"}],"name":"Embedding","title":"Embedding","symbol_id":"Flux.Embedding","public":false,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["Embedding(in => out; init=randn)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["A lookup table that stores embeddings of dimension ",{"attributes":{},"tag":"code","children":["out"],"type":"node"}," for a vocabulary of size ",{"attributes":{},"tag":"code","children":["in"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["This layer is often used to store word embeddings and retrieve them using indices. The input to the layer can be either a vector of indexes or the corresponding [onehot encoding](",{"attributes":{},"tag":"citation","children":[],"type":"node"}," Flux.OneHotArray)."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> vocab_size, embed_size = 1000, 4;\n\njulia> model = Flux.Embedding(vocab_size => embed_size)\nEmbedding(1000 => 4)  # 4_000 parameters\n\njulia> vocab_idxs = [1, 722, 53, 220, 3];\n\njulia> x = Flux.OneHotMatrix(vocab_idxs, vocab_size); summary(x)\n\"1000×5 OneHotMatrix(::Vector{Int64}) with eltype Bool\"\n\njulia> model(x) |> summary\n\"4×5 Matrix{Float32}\"\n\njulia> model(vocab_idxs) == model(x)\ntrue\n"],"type":"node"}],"type":"node"}],"type":"node"}