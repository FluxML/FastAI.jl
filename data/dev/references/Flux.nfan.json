{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"Flux/src/utils.jl","docid":"sourcefiles/Flux/src/utils.jl"}],"methods":[{"line":27,"file":"/home/runner/.julia/packages/Flux/KkC79/src/utils.jl","method_id":"Flux.nfan_1","symbol_id":"Flux.nfan","filedoc":"sourcefiles/Flux/src/utils.jl","signature":"nfan()"},{"line":30,"file":"/home/runner/.julia/packages/Flux/KkC79/src/utils.jl","method_id":"Flux.nfan_2","symbol_id":"Flux.nfan","filedoc":"sourcefiles/Flux/src/utils.jl","signature":"nfan(dims::Tuple)"},{"line":28,"file":"/home/runner/.julia/packages/Flux/KkC79/src/utils.jl","method_id":"Flux.nfan_3","symbol_id":"Flux.nfan","filedoc":"sourcefiles/Flux/src/utils.jl","signature":"nfan(n)"},{"line":29,"file":"/home/runner/.julia/packages/Flux/KkC79/src/utils.jl","method_id":"Flux.nfan_4","symbol_id":"Flux.nfan","filedoc":"sourcefiles/Flux/src/utils.jl","signature":"nfan(n_out, n_in)"},{"line":31,"file":"/home/runner/.julia/packages/Flux/KkC79/src/utils.jl","method_id":"Flux.nfan_5","symbol_id":"Flux.nfan","filedoc":"sourcefiles/Flux/src/utils.jl","signature":"nfan(dims...)"}],"name":"nfan","title":"nfan","symbol_id":"Flux.nfan","public":false,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["nfan(n_out, n_in=1) -> Tuple\nnfan(dims...)\nnfan(dims::Tuple)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["For a layer characterized by dimensions ",{"attributes":{},"tag":"code","children":["dims"],"type":"node"},", return a tuple ",{"attributes":{},"tag":"code","children":["(fan_in, fan_out)"],"type":"node"},", where ",{"attributes":{},"tag":"code","children":["fan_in"],"type":"node"}," is the number of input neurons connected to an output one, and ",{"attributes":{},"tag":"code","children":["fan_out"],"type":"node"}," is the number of output neurons connected to an input one."],"type":"node"},{"attributes":{},"tag":"p","children":["This function is mainly used by weight initializers, e.g., [",{"attributes":{},"tag":"code","children":["kaiming_normal"],"type":"node"},"](",{"attributes":{},"tag":"citation","children":[],"type":"node"}," Flux.kaiming_normal)."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> layer = Dense(10, 20);\n\njulia> Flux.nfan(size(layer.weight))\n(10, 20)\n\njulia> layer = Conv((3, 3), 2=>10);\n\njulia> Flux.nfan(size(layer.weight))\n(18, 90)\n"],"type":"node"}],"type":"node"}],"type":"node"}