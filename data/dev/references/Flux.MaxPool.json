{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"FastVision/src/models/xresnet.jl","docid":"sourcefiles/FastVision/src/models/xresnet.jl"},{"tag":"sourcefile","title":"Flux/src/Flux.jl","docid":"sourcefiles/Flux/src/Flux.jl"},{"tag":"sourcefile","title":"Flux/src/layers/conv.jl","docid":"sourcefiles/Flux/src/layers/conv.jl"}],"methods":[{"line":676,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/conv.jl","method_id":"Flux.MaxPool_1","symbol_id":"Flux.MaxPool","filedoc":"sourcefiles/Flux/src/layers/conv.jl","signature":"MaxPool(k::Tuple{Vararg{Int64, N}}, pad::Tuple{Vararg{Int64, M}}, stride::Tuple{Vararg{Int64, N}})"},{"line":681,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/conv.jl","method_id":"Flux.MaxPool_2","symbol_id":"Flux.MaxPool","filedoc":"sourcefiles/Flux/src/layers/conv.jl","signature":"MaxPool(k::Tuple{Vararg{Integer, N}}; pad, stride)"}],"name":"MaxPool","title":"MaxPool","symbol_id":"Flux.MaxPool","public":true,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["MaxPool(window::NTuple; pad=0, stride=window)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Max pooling layer, which replaces all pixels in a block of size ",{"attributes":{},"tag":"code","children":["window"],"type":"node"}," with one."],"type":"node"},{"attributes":{},"tag":"p","children":["Expects as input an array with ",{"attributes":{},"tag":"code","children":["ndims(x) == N+2"],"type":"node"},", i.e. channel and batch dimensions, after the ",{"attributes":{},"tag":"code","children":["N"],"type":"node"}," feature dimensions, where ",{"attributes":{},"tag":"code","children":["N = length(window)"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["By default the window size is also the stride in each dimension. The keyword ",{"attributes":{},"tag":"code","children":["pad"],"type":"node"}," accepts the same options as for the ",{"attributes":{},"tag":"code","children":["Conv"],"type":"node"}," layer, including ",{"attributes":{},"tag":"code","children":["SamePad()"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["See also ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["Conv"],"type":"node"}],"type":"node"},", ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["MeanPool"],"type":"node"}],"type":"node"},", ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["AdaptiveMaxPool"],"type":"node"}],"type":"node"},", ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["GlobalMaxPool"],"type":"node"}],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> xs = rand(Float32, 100, 100, 3, 50);  # batch of 50 RGB images\n\njulia> m = Chain(Conv((5, 5), 3 => 7, pad=SamePad()), MaxPool((5, 5), pad=SamePad()))\nChain(\n  Conv((5, 5), 3 => 7, pad=2),          # 532 parameters\n  MaxPool((5, 5), pad=2),\n)\n\njulia> m[1](xs) |> size\n(100, 100, 7, 50)\n\njulia> m(xs) |> size\n(20, 20, 7, 50)\n\njulia> layer = MaxPool((5,), pad=2, stride=(3,))  # one-dimensional window\nMaxPool((5,), pad=2, stride=3)\n\njulia> layer(rand(Float32, 100, 7, 50)) |> size\n(34, 7, 50)\n"],"type":"node"}],"type":"node"}],"type":"node"}