{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"FluxTraining/src/callbacks/metrics.jl","docid":"sourcefiles/FluxTraining/src/callbacks/metrics.jl"},{"tag":"documentation","title":"AbstractMetric","docid":"references/FluxTraining.AbstractMetric"},{"tag":"sourcefile","title":"Flux/src/layers/recurrent.jl","docid":"sourcefiles/Flux/src/layers/recurrent.jl"}],"methods":[{"line":179,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/recurrent.jl","method_id":"Flux.reset!_1","symbol_id":"Flux.reset!","filedoc":"sourcefiles/Flux/src/layers/recurrent.jl","signature":"reset!(m::Flux.Recur)"},{"line":180,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/recurrent.jl","method_id":"Flux.reset!_2","symbol_id":"Flux.reset!","filedoc":"sourcefiles/Flux/src/layers/recurrent.jl","signature":"reset!(m)"}],"name":"reset!","title":"reset!","symbol_id":"Flux.reset!","public":false,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["reset!(rnn)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Reset the hidden state of a recurrent layer back to its original value."],"type":"node"},{"attributes":{},"tag":"p","children":["Assuming you have a ",{"attributes":{},"tag":"code","children":["Recur"],"type":"node"}," layer ",{"attributes":{},"tag":"code","children":["rnn"],"type":"node"},", this is roughly equivalent to:"],"type":"node"},{"attributes":{"lang":""},"tag":"codeblock","children":["rnn.state = hidden(rnn.cell)\n"],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> r = Flux.RNNCell(relu, ones(1,1), zeros(1,1), ones(1,1), zeros(1,1));  # users should use the RNN wrapper struct instead\n\njulia> y = Flux.Recur(r, ones(1,1));\n\njulia> y.state\n1×1 Matrix{Float64}:\n 1.0\n\njulia> y(ones(1,1))  # relu(1*1 + 1)\n1×1 Matrix{Float64}:\n 2.0\n\njulia> y.state\n1×1 Matrix{Float64}:\n 2.0\n\njulia> Flux.reset!(y)\n1×1 Matrix{Float64}:\n 0.0\n\njulia> y.state\n1×1 Matrix{Float64}:\n 0.0\n"],"type":"node"}],"type":"node"}],"type":"node"}