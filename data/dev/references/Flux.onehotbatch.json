{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"Flux/src/onehot.jl","docid":"sourcefiles/Flux/src/onehot.jl"}],"methods":[{"line":186,"file":"/home/runner/.julia/packages/Flux/KkC79/src/onehot.jl","method_id":"Flux.onehotbatch_1","symbol_id":"Flux.onehotbatch","filedoc":"sourcefiles/Flux/src/onehot.jl","signature":"onehotbatch(data, labels, default...)"}],"name":"onehotbatch","title":"onehotbatch","symbol_id":"Flux.onehotbatch","public":false,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["onehotbatch(xs, labels, [default])\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Returns a ",{"attributes":{},"tag":"code","children":["OneHotMatrix"],"type":"node"}," where ",{"attributes":{},"tag":"code","children":["k"],"type":"node"},"th column of the matrix is [",{"attributes":{},"tag":"code","children":["onehot(xs[k], labels)"],"type":"node"},"](",{"attributes":{},"tag":"citation","children":[],"type":"node"}," onehot). This is a sparse matrix, which stores just a ",{"attributes":{},"tag":"code","children":["Vector{UInt32}"],"type":"node"}," containing the indices of the nonzero elements."],"type":"node"},{"attributes":{},"tag":"p","children":["If one of the inputs in ",{"attributes":{},"tag":"code","children":["xs"],"type":"node"}," is not found in ",{"attributes":{},"tag":"code","children":["labels"],"type":"node"},", that column is ",{"attributes":{},"tag":"code","children":["onehot(default, labels)"],"type":"node"}," if ",{"attributes":{},"tag":"code","children":["default"],"type":"node"}," is given, else an error."],"type":"node"},{"attributes":{},"tag":"p","children":["If ",{"attributes":{},"tag":"code","children":["xs"],"type":"node"}," has more dimensions, ",{"attributes":{},"tag":"code","children":["M = ndims(xs) > 1"],"type":"node"},", then the result is an ",{"attributes":{},"tag":"code","children":["AbstractArray{Bool, M+1}"],"type":"node"}," which is one-hot along the first dimension, i.e. ",{"attributes":{},"tag":"code","children":["result[:, k...] == onehot(xs[k...], labels)"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["Note that ",{"attributes":{},"tag":"code","children":["xs"],"type":"node"}," can be any iterable, such as a string. And that using a tuple for ",{"attributes":{},"tag":"code","children":["labels"],"type":"node"}," will often speed up construction, certainly for less than 32 classes."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> oh = Flux.onehotbatch(\"abracadabra\", 'a':'e', 'e')\n5×11 OneHotMatrix(::Vector{UInt32}) with eltype Bool:\n 1  ⋅  ⋅  1  ⋅  1  ⋅  1  ⋅  ⋅  1\n ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  1  ⋅  ⋅  ⋅  ⋅  ⋅  ⋅  1  ⋅\n\njulia> reshape(1:15, 3, 5) * oh  # this matrix multiplication is done efficiently\n3×11 Matrix{Int64}:\n 1  4  13  1  7  1  10  1  4  13  1\n 2  5  14  2  8  2  11  2  5  14  2\n 3  6  15  3  9  3  12  3  6  15  3\n"],"type":"node"}],"type":"node"}],"type":"node"}