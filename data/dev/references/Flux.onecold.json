{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"FluxTraining/src/FluxTraining.jl","docid":"sourcefiles/FluxTraining/src/FluxTraining.jl"},{"tag":"sourcefile","title":"Flux/src/layers/basic.jl","docid":"sourcefiles/Flux/src/layers/basic.jl"},{"tag":"sourcefile","title":"Flux/src/onehot.jl","docid":"sourcefiles/Flux/src/onehot.jl"},{"tag":"sourcefile","title":"FluxTraining/src/functional/metrics.jl","docid":"sourcefiles/FluxTraining/src/functional/metrics.jl"}],"methods":[{"line":233,"file":"/home/runner/.julia/packages/Flux/KkC79/src/onehot.jl","method_id":"Flux.onecold_1","symbol_id":"Flux.onecold","filedoc":"sourcefiles/Flux/src/onehot.jl","signature":"onecold(y::AbstractVector)"},{"line":233,"file":"/home/runner/.julia/packages/Flux/KkC79/src/onehot.jl","method_id":"Flux.onecold_2","symbol_id":"Flux.onecold","filedoc":"sourcefiles/Flux/src/onehot.jl","signature":"onecold(y::AbstractVector, labels)"},{"line":234,"file":"/home/runner/.julia/packages/Flux/KkC79/src/onehot.jl","method_id":"Flux.onecold_3","symbol_id":"Flux.onecold","filedoc":"sourcefiles/Flux/src/onehot.jl","signature":"onecold(y::AbstractArray)"},{"line":234,"file":"/home/runner/.julia/packages/Flux/KkC79/src/onehot.jl","method_id":"Flux.onecold_4","symbol_id":"Flux.onecold","filedoc":"sourcefiles/Flux/src/onehot.jl","signature":"onecold(y::AbstractArray, labels)"}],"name":"onecold","title":"onecold","symbol_id":"Flux.onecold","public":false,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["onecold(y::AbstractArray, labels = 1:size(y,1))\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Roughly the inverse operation of ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["onehot"],"type":"node"}],"type":"node"}," or ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["onehotbatch"],"type":"node"}],"type":"node"},": This finds the index of the largest element of ",{"attributes":{},"tag":"code","children":["y"],"type":"node"},", or each column of ",{"attributes":{},"tag":"code","children":["y"],"type":"node"},", and looks them up in ",{"attributes":{},"tag":"code","children":["labels"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["If ",{"attributes":{},"tag":"code","children":["labels"],"type":"node"}," are not specified, the default is integers ",{"attributes":{},"tag":"code","children":["1:size(y,1)"],"type":"node"}," -- the same operation as ",{"attributes":{},"tag":"code","children":["argmax(y, dims=1)"],"type":"node"}," but sometimes a different return type."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> Flux.onecold([false, true, false])\n2\n\njulia> Flux.onecold([0.3, 0.2, 0.5], (:a, :b, :c))\n:c\n\njulia> Flux.onecold([ 1  0  0  1  0  1  0  1  0  0  1\n                      0  1  0  0  0  0  0  0  1  0  0\n                      0  0  0  0  1  0  0  0  0  0  0\n                      0  0  0  0  0  0  1  0  0  0  0\n                      0  0  1  0  0  0  0  0  0  1  0 ], 'a':'e') |> String\n\"abeacadabea\"\n"],"type":"node"}],"type":"node"}],"type":"node"}