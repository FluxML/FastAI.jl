{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"Flux/src/Flux.jl","docid":"sourcefiles/Flux/src/Flux.jl"},{"tag":"sourcefile","title":"Flux/src/layers/conv.jl","docid":"sourcefiles/Flux/src/layers/conv.jl"},{"tag":"sourcefile","title":"FastVision/src/models/layers.jl","docid":"sourcefiles/FastVision/src/models/layers.jl"}],"methods":[{"line":505,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/conv.jl","method_id":"Flux.AdaptiveMaxPool_1","symbol_id":"Flux.AdaptiveMaxPool","filedoc":"sourcefiles/Flux/src/layers/conv.jl","signature":"AdaptiveMaxPool(out::Tuple{Vararg{Int64, O}})"}],"name":"AdaptiveMaxPool","title":"AdaptiveMaxPool","symbol_id":"Flux.AdaptiveMaxPool","public":true,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["AdaptiveMaxPool(out::NTuple)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Adaptive max pooling layer. Calculates the necessary window size such that its output has ",{"attributes":{},"tag":"code","children":["size(y)[1:N] == out"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["Expects as input an array with ",{"attributes":{},"tag":"code","children":["ndims(x) == N+2"],"type":"node"},", i.e. channel and batch dimensions, after the ",{"attributes":{},"tag":"code","children":["N"],"type":"node"}," feature dimensions, where ",{"attributes":{},"tag":"code","children":["N = length(out)"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["See also ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["MaxPool"],"type":"node"}],"type":"node"},", ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["AdaptiveMeanPool"],"type":"node"}],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> xs = rand(Float32, 100, 100, 3, 50);  # batch of 50 RGB images\n\njulia> AdaptiveMaxPool((25, 25))(xs) |> size\n(25, 25, 3, 50)\n\njulia> MaxPool((4,4))(xs) â‰ˆ AdaptiveMaxPool((25, 25))(xs)\ntrue\n"],"type":"node"}],"type":"node"}],"type":"node"}