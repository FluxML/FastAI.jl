{"attributes":{"kind":"abstract type","backlinks":[{"tag":"sourcefile","title":"FastAI/src/encodings/onehot.jl","docid":"sourcefiles/FastAI/src/encodings/onehot.jl"},{"tag":"documentation","title":"encode","docid":"references/FastAI.encode"},{"tag":"documentation","title":"Validation","docid":"references/FastAI.Validation"},{"tag":"documentation","title":"Training","docid":"references/FastAI.Training"},{"tag":"sourcefile","title":"FastAI/src/datablock/wrappers.jl","docid":"sourcefiles/FastAI/src/datablock/wrappers.jl"},{"tag":"sourcefile","title":"FastVision/src/FastVision.jl","docid":"sourcefiles/FastVision/src/FastVision.jl"},{"tag":"sourcefile","title":"FastAI/src/blocks/many.jl","docid":"sourcefiles/FastAI/src/blocks/many.jl"},{"tag":"documentation","title":"AbstractBlockTask","docid":"references/FastAI.AbstractBlockTask"},{"tag":"sourcefile","title":"FastAI/src/encodings/only.jl","docid":"sourcefiles/FastAI/src/encodings/only.jl"},{"tag":"sourcefile","title":"FastVision/src/encodings/keypointpreprocessing.jl","docid":"sourcefiles/FastVision/src/encodings/keypointpreprocessing.jl"},{"tag":"sourcefile","title":"FastAI/src/datablock/encoding.jl","docid":"sourcefiles/FastAI/src/datablock/encoding.jl"},{"tag":"sourcefile","title":"FastTabular/src/encodings/tabularpreprocessing.jl","docid":"sourcefiles/FastTabular/src/encodings/tabularpreprocessing.jl"},{"tag":"sourcefile","title":"FastVision/src/encodings/imagepreprocessing.jl","docid":"sourcefiles/FastVision/src/encodings/imagepreprocessing.jl"},{"tag":"sourcefile","title":"FastTabular/src/FastTabular.jl","docid":"sourcefiles/FastTabular/src/FastTabular.jl"}],"methods":[],"name":"Encoding","title":"Encoding","symbol_id":"FastAI.Encoding","public":false,"module_id":"FastAI"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["abstract type Encoding\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Transformation of ",{"attributes":{},"tag":"code","children":["Block"],"type":"node"},"s. Can encode some ",{"attributes":{},"tag":"code","children":["Block"],"type":"node"},"s ([",{"attributes":{},"tag":"code","children":["encode"],"type":"node"},"]), and optionally decode them [",{"attributes":{},"tag":"code","children":["decode"],"type":"node"},"]"],"type":"node"},{"attributes":{},"tag":"h2","children":["Interface"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["encode(::E, ::Context, block::Block, data)"],"type":"node"}," encodes ",{"attributes":{},"tag":"code","children":["block"],"type":"node"}," of ",{"attributes":{},"tag":"code","children":["data"],"type":"node"},". The default is to do nothing. This should be overloaded for an encoding ",{"attributes":{},"tag":"code","children":["E"],"type":"node"},", concrete ",{"attributes":{},"tag":"code","children":["Block"],"type":"node"}," types and possibly a context."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["decode(::E, ::Context, block::Block, data)"],"type":"node"}," decodes ",{"attributes":{},"tag":"code","children":["block"],"type":"node"}," of ",{"attributes":{},"tag":"code","children":["data"],"type":"node"},". This should correspond as closely as possible to the inverse of ",{"attributes":{},"tag":"code","children":["encode(::E, ...)"],"type":"node"},". The default is to do nothing, as not all encodings can be reversed. This should be overloaded for an encoding ",{"attributes":{},"tag":"code","children":["E"],"type":"node"},", concrete ",{"attributes":{},"tag":"code","children":["Block"],"type":"node"}," types and possibly a context."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["encodedblock(::E, block::Block) -> block'"],"type":"node"}," returns the block that is obtained by encoding ",{"attributes":{},"tag":"code","children":["block"],"type":"node"}," with encoding ",{"attributes":{},"tag":"code","children":["E"],"type":"node"},". This needs to be constant for an instance of ",{"attributes":{},"tag":"code","children":["E"],"type":"node"},", so it cannot depend on the sample or on randomness. The default is to return ",{"attributes":{},"tag":"code","children":["nothing"],"type":"node"},", meaning the same block is returned and not changed. Encodings that return the same block but change the data (e.g. ",{"attributes":{},"tag":"code","children":["ProjectiveTransforms"],"type":"node"},") should return ",{"attributes":{},"tag":"code","children":["block"],"type":"node"},"."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["decodedblock(::E, block::Block) -> block'"],"type":"node"}," returns the block that is obtained by decoding ",{"attributes":{},"tag":"code","children":["block"],"type":"node"}," with encoding ",{"attributes":{},"tag":"code","children":["E"],"type":"node"},". This needs to be constant for an instance of ",{"attributes":{},"tag":"code","children":["E"],"type":"node"},", so it cannot depend on the sample or on randomness. The default is to return ",{"attributes":{},"tag":"code","children":["nothing"],"type":"node"},", meaning the same block is returned and not changed."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["encode!(buf, ::E, ::Context, block::Block, data)"],"type":"node"}," encodes ",{"attributes":{},"tag":"code","children":["data"],"type":"node"}," inplace."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["decode!(buf, ::E, ::Context, block::Block, data)"],"type":"node"}," decodes ",{"attributes":{},"tag":"code","children":["data"],"type":"node"}," inplace."],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}