{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"Flux/src/layers/conv.jl","docid":"sourcefiles/Flux/src/layers/conv.jl"}],"methods":[{"line":182,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/conv.jl","method_id":"Flux.convfilter_1","symbol_id":"Flux.convfilter","filedoc":"sourcefiles/Flux/src/layers/conv.jl","signature":"convfilter(filter::Tuple{Vararg{Integer, N}}, ch::Pair{<:Integer, <:Integer}; init, groups)"}],"name":"convfilter","title":"convfilter","symbol_id":"Flux.convfilter","public":false,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["convfilter(filter::Tuple, in => out[; init = glorot_uniform])\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Constructs a standard convolutional weight matrix with given ",{"attributes":{},"tag":"code","children":["filter"],"type":"node"}," and channels from ",{"attributes":{},"tag":"code","children":["in"],"type":"node"}," to ",{"attributes":{},"tag":"code","children":["out"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["Accepts the keyword ",{"attributes":{},"tag":"code","children":["init"],"type":"node"}," (default: ",{"attributes":{},"tag":"code","children":["glorot_uniform"],"type":"node"},") to control the sampling distribution."],"type":"node"},{"attributes":{},"tag":"p","children":["This is internally used by the ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["Conv"],"type":"node"}],"type":"node"}," layer."],"type":"node"}],"type":"node"}],"type":"node"}