{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"Flux/src/optimise/optimisers.jl","docid":"sourcefiles/Flux/src/optimise/optimisers.jl"},{"tag":"documentation","title":"WeightDecay","docid":"references/Flux.Optimise.WeightDecay"},{"tag":"sourcefile","title":"Flux/src/optimise/Optimise.jl","docid":"sourcefiles/Flux/src/optimise/Optimise.jl"},{"tag":"documentation","title":"InvDecay","docid":"references/Flux.Optimise.InvDecay"},{"tag":"sourcefile","title":"FastAI/src/training/finetune.jl","docid":"sourcefiles/FastAI/src/training/finetune.jl"},{"tag":"documentation","title":"ExpDecay","docid":"references/Flux.Optimise.ExpDecay"},{"tag":"sourcefile","title":"FastAI/src/FastAI.jl","docid":"sourcefiles/FastAI/src/FastAI.jl"},{"tag":"sourcefile","title":"FastAI/src/training/discriminativelrs.jl","docid":"sourcefiles/FastAI/src/training/discriminativelrs.jl"},{"tag":"documentation","title":"DiscriminativeLRs","docid":"references/FastAI.DiscriminativeLRs"},{"tag":"sourcefile","title":"FastAI/src/training/onecycle.jl","docid":"sourcefiles/FastAI/src/training/onecycle.jl"}],"methods":[{"line":572,"file":"/home/runner/.julia/packages/Flux/KkC79/src/optimise/optimisers.jl","method_id":"Flux.Optimise.Optimiser_1","symbol_id":"Flux.Optimise.Optimiser","filedoc":"sourcefiles/Flux/src/optimise/optimisers.jl","signature":"Flux.Optimise.Optimiser(opts::Flux.Optimise.AbstractOptimiser...)"},{"line":569,"file":"/home/runner/.julia/packages/Flux/KkC79/src/optimise/optimisers.jl","method_id":"Flux.Optimise.Optimiser_2","symbol_id":"Flux.Optimise.Optimiser","filedoc":"sourcefiles/Flux/src/optimise/optimisers.jl","signature":"Flux.Optimise.Optimiser(os::Vector{Any})"},{"line":569,"file":"/home/runner/.julia/packages/Flux/KkC79/src/optimise/optimisers.jl","method_id":"Flux.Optimise.Optimiser_3","symbol_id":"Flux.Optimise.Optimiser","filedoc":"sourcefiles/Flux/src/optimise/optimisers.jl","signature":"Flux.Optimise.Optimiser(os)"}],"name":"Optimiser","title":"Optimiser","symbol_id":"Flux.Optimise.Optimiser","public":true,"module_id":"Flux.Optimise"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["Optimiser(a, b, c...)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Combine several optimisers into one; each optimiser produces a modified gradient that will be fed into the next, and this is finally applied to the parameter as usual."],"type":"node"}],"type":"node"}],"type":"node"}