{"attributes":{"kind":"function","backlinks":[],"methods":[{"line":133,"file":"/home/runner/.julia/packages/Flux/KkC79/src/onehot.jl","method_id":"Flux.onehot_1","symbol_id":"Flux.onehot","filedoc":"sourcefiles/Flux/src/onehot.jl","signature":"onehot(x, labels)"},{"line":139,"file":"/home/runner/.julia/packages/Flux/KkC79/src/onehot.jl","method_id":"Flux.onehot_2","symbol_id":"Flux.onehot","filedoc":"sourcefiles/Flux/src/onehot.jl","signature":"onehot(x, labels, default)"}],"name":"onehot","title":"onehot","symbol_id":"Flux.onehot","public":false,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["onehot(x, labels, [default])\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Return a ",{"attributes":{},"tag":"code","children":["OneHotVector"],"type":"node"}," which is roughly a sparse representation of ",{"attributes":{},"tag":"code","children":["x .== labels"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["Instead of storing say ",{"attributes":{},"tag":"code","children":["Vector{Bool}"],"type":"node"},", it stores the index of the first occurrence of ",{"attributes":{},"tag":"code","children":["x"],"type":"node"}," in ",{"attributes":{},"tag":"code","children":["labels"],"type":"node"},". If ",{"attributes":{},"tag":"code","children":["x"],"type":"node"}," is not found in labels, then it either returns ",{"attributes":{},"tag":"code","children":["onehot(default, labels)"],"type":"node"},", or gives an error if no default is given."],"type":"node"},{"attributes":{},"tag":"p","children":["See also ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["onehotbatch"],"type":"node"}],"type":"node"}," to apply this to many ",{"attributes":{},"tag":"code","children":["x"],"type":"node"},"s, and ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["onecold"],"type":"node"}],"type":"node"}," to reverse either of these, as well as to generalise ",{"attributes":{},"tag":"code","children":["argmax"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> β = Flux.onehot(:b, (:a, :b, :c))\n3-element OneHotVector(::UInt32) with eltype Bool:\n ⋅\n 1\n ⋅\n\njulia> αβγ = (Flux.onehot(0, 0:2), β, Flux.onehot(:z, [:a, :b, :c], :c))  # uses default\n(Bool[1, 0, 0], Bool[0, 1, 0], Bool[0, 0, 1])\n\njulia> hcat(αβγ...)  # preserves sparsity\n3×3 OneHotMatrix(::Vector{UInt32}) with eltype Bool:\n 1  ⋅  ⋅\n ⋅  1  ⋅\n ⋅  ⋅  1\n"],"type":"node"}],"type":"node"}],"type":"node"}