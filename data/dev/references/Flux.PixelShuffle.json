{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"Flux/src/layers/upsample.jl","docid":"sourcefiles/Flux/src/layers/upsample.jl"},{"tag":"sourcefile","title":"FastVision/src/models/unet.jl","docid":"sourcefiles/FastVision/src/models/unet.jl"},{"tag":"sourcefile","title":"Flux/src/Flux.jl","docid":"sourcefiles/Flux/src/Flux.jl"},{"tag":"sourcefile","title":"FastVision/src/models/blocks.jl","docid":"sourcefiles/FastVision/src/models/blocks.jl"},{"tag":"sourcefile","title":"FastVision/src/models/layers.jl","docid":"sourcefiles/FastVision/src/models/layers.jl"}],"methods":[{"line":141,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/upsample.jl","method_id":"Flux.PixelShuffle_1","symbol_id":"Flux.PixelShuffle","filedoc":"sourcefiles/Flux/src/layers/upsample.jl","signature":"PixelShuffle(r::Int64)"},{"line":141,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/upsample.jl","method_id":"Flux.PixelShuffle_2","symbol_id":"Flux.PixelShuffle","filedoc":"sourcefiles/Flux/src/layers/upsample.jl","signature":"PixelShuffle(r)"}],"name":"PixelShuffle","title":"PixelShuffle","symbol_id":"Flux.PixelShuffle","public":true,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["PixelShuffle(r::Int)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Pixel shuffling layer with upscale factor ",{"attributes":{},"tag":"code","children":["r"],"type":"node"},". Usually used for generating higher resolution images while upscaling them."],"type":"node"},{"attributes":{},"tag":"p","children":["See ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["NNlib.pixel_shuffle"],"type":"node"}],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> p = PixelShuffle(2);\n\njulia> xs = [2row + col + channel/10 for row in 1:2, col in 1:2, channel in 1:4, n in 1:1]\n2×2×4×1 Array{Float64, 4}:\n[:, :, 1, 1] =\n 3.1  4.1\n 5.1  6.1\n\n[:, :, 2, 1] =\n 3.2  4.2\n 5.2  6.2\n\n[:, :, 3, 1] =\n 3.3  4.3\n 5.3  6.3\n\n[:, :, 4, 1] =\n 3.4  4.4\n 5.4  6.4\n\njulia> p(xs)\n4×4×1×1 Array{Float64, 4}:\n[:, :, 1, 1] =\n 3.1  3.3  4.1  4.3\n 3.2  3.4  4.2  4.4\n 5.1  5.3  6.1  6.3\n 5.2  5.4  6.2  6.4\n\njulia> xs = [3row + col + channel/10 for row in 1:2, col in 1:3, channel in 1:4, n in 1:1]\n2×3×4×1 Array{Float64, 4}:\n[:, :, 1, 1] =\n 4.1  5.1  6.1\n 7.1  8.1  9.1\n\n[:, :, 2, 1] =\n 4.2  5.2  6.2\n 7.2  8.2  9.2\n\n[:, :, 3, 1] =\n 4.3  5.3  6.3\n 7.3  8.3  9.3\n\n[:, :, 4, 1] =\n 4.4  5.4  6.4\n 7.4  8.4  9.4\n\njulia> p(xs)\n4×6×1×1 Array{Float64, 4}:\n[:, :, 1, 1] =\n 4.1  4.3  5.1  5.3  6.1  6.3\n 4.2  4.4  5.2  5.4  6.2  6.4\n 7.1  7.3  8.1  8.3  9.1  9.3\n 7.2  7.4  8.2  8.4  9.2  9.4\n"],"type":"node"}],"type":"node"}],"type":"node"}