{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"FastAI/src/encodings/onehot.jl","docid":"sourcefiles/FastAI/src/encodings/onehot.jl"},{"tag":"sourcefile","title":"Flux/src/losses/Losses.jl","docid":"sourcefiles/Flux/src/losses/Losses.jl"},{"tag":"sourcefile","title":"Flux/src/losses/functions.jl","docid":"sourcefiles/Flux/src/losses/functions.jl"}],"methods":[{"line":332,"file":"/home/runner/.julia/packages/Flux/KkC79/src/losses/functions.jl","method_id":"Flux.Losses.logitbinarycrossentropy_1","symbol_id":"Flux.Losses.logitbinarycrossentropy","filedoc":"sourcefiles/Flux/src/losses/functions.jl","signature":"logitbinarycrossentropy(ŷ, y; agg)"}],"name":"logitbinarycrossentropy","title":"logitbinarycrossentropy","symbol_id":"Flux.Losses.logitbinarycrossentropy","public":true,"module_id":"Flux.Losses"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["logitbinarycrossentropy(ŷ, y; agg = mean)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Mathematically equivalent to ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["binarycrossentropy(σ(ŷ), y)"],"type":"node"}],"type":"node"}," but is more numerically stable."],"type":"node"},{"attributes":{},"tag":"p","children":["See also: ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["crossentropy"],"type":"node"}],"type":"node"},", ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["logitcrossentropy"],"type":"node"}],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> y_bin = Bool[1,0,1];\n\njulia> y_model = Float32[2, -1, pi]\n3-element Vector{Float32}:\n  2.0\n -1.0\n  3.1415927\n\njulia> Flux.logitbinarycrossentropy(y_model, y_bin)\n0.160832f0\n\njulia> Flux.binarycrossentropy(sigmoid.(y_model), y_bin)\n0.16083185f0\n"],"type":"node"}],"type":"node"}],"type":"node"}