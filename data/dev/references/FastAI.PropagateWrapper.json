{"attributes":{"kind":"abstract type","backlinks":[{"tag":"sourcefile","title":"FastAI/src/datablock/wrappers.jl","docid":"sourcefiles/FastAI/src/datablock/wrappers.jl"}],"methods":[{"line":193,"file":"/home/runner/work/FastAI.jl/FastAI.jl/src/datablock/wrappers.jl","method_id":"FastAI.PropagateWrapper_1","symbol_id":"FastAI.PropagateWrapper","filedoc":"sourcefiles/FastAI/src/datablock/wrappers.jl","signature":"FastAI.PropagateWrapper(w::FastAI.TestWrapper)"},{"line":105,"file":"/home/runner/work/FastAI.jl/FastAI.jl/src/datablock/wrappers.jl","method_id":"FastAI.PropagateWrapper_2","symbol_id":"FastAI.PropagateWrapper","filedoc":"sourcefiles/FastAI/src/datablock/wrappers.jl","signature":"FastAI.PropagateWrapper(::FastAI.WrapperBlock)"}],"name":"PropagateWrapper","title":"PropagateWrapper","symbol_id":"FastAI.PropagateWrapper","public":false,"module_id":"FastAI"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["abstract type PropagateWrapper\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Defines the default propagation behavior of a ",{"attributes":{},"tag":"code","children":["WrapperBlock"],"type":"node"}," when an encoding is applied to it."],"type":"node"},{"attributes":{},"tag":"p","children":["Propagation refers to what happens when an encoding is applied to a ",{"attributes":{},"tag":"code","children":["WrapperBlock"],"type":"node"},". If no ",{"attributes":{},"tag":"code","children":["encode"],"type":"node"}," method is defined for a wrapper block ",{"attributes":{},"tag":"code","children":["wrapper"],"type":"node"},", ",{"attributes":{},"tag":"code","children":["encode"],"type":"node"}," is instead called on the wrapped block. Propagating the wrapper block means that the block resulting from encoding the wrapped block is rewrapped in ",{"attributes":{},"tag":"code","children":["wrapper."],"type":"node"},"."],"type":"node"},{"attributes":{"lang":""},"tag":"codeblock","children":["wrapper = Wrapper(block)\n# propagate\nencodedblock(enc, wrapper) = Wrapper(encodedblock(enc, wrapped(wrapper)))\n\n# don't propagate\nencodedblock(enc, wrapper) = encodedblock(enc, wrapped(wrapper))\n"],"type":"node"},{"attributes":{},"tag":"p","children":["The following wrapping behaviors exist:"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["PropagateAlways"],"type":"node"},": Always propagate. This is the default behavior."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["PropagateNever"],"type":"node"},": Never propagate"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["PropagateSameBlock"],"type":"node"},": Only propagate if the wrapped block is unchanged by the encoding"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}