{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"MLUtils/src/MLUtils.jl","docid":"sourcefiles/MLUtils/src/MLUtils.jl"},{"tag":"sourcefile","title":"MLUtils/src/utils.jl","docid":"sourcefiles/MLUtils/src/utils.jl"}],"methods":[{"line":163,"file":"/home/runner/.julia/packages/MLUtils/1VpUo/src/utils.jl","method_id":"MLUtils.chunk_1","symbol_id":"MLUtils.chunk","filedoc":"sourcefiles/MLUtils/src/utils.jl","signature":"chunk(x::AbstractArray, n::Int64; dims)"},{"line":161,"file":"/home/runner/.julia/packages/MLUtils/1VpUo/src/utils.jl","method_id":"MLUtils.chunk_2","symbol_id":"MLUtils.chunk","filedoc":"sourcefiles/MLUtils/src/utils.jl","signature":"chunk(x, n::Int64)"}],"name":"chunk","title":"chunk","symbol_id":"MLUtils.chunk","public":true,"module_id":"MLUtils"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["chunk(x, n; [dims])\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Split ",{"attributes":{},"tag":"code","children":["x"],"type":"node"}," into ",{"attributes":{},"tag":"code","children":["n"],"type":"node"}," parts. The parts contain the same number of elements except possibly for the last one that can be smaller."],"type":"node"},{"attributes":{},"tag":"p","children":["If ",{"attributes":{},"tag":"code","children":["x"],"type":"node"}," is an array, ",{"attributes":{},"tag":"code","children":["dims"],"type":"node"}," can be used to specify along which dimension to split (defaults to the last dimension)."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> chunk(1:10, 3)\n3-element Vector{UnitRange{Int64}}:\n 1:4\n 5:8\n 9:10\n\njulia> x = reshape(collect(1:20), (5, 4))\n5×4 Matrix{Int64}:\n 1   6  11  16\n 2   7  12  17\n 3   8  13  18\n 4   9  14  19\n 5  10  15  20\n\njulia> xs = chunk(x, 2, dims=1)\n2-element Vector{SubArray{Int64, 2, Matrix{Int64}, Tuple{UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, false}}:\n [1 6 11 16; 2 7 12 17; 3 8 13 18]\n [4 9 14 19; 5 10 15 20]\n\njulia> xs[1]\n3×4 view(::Matrix{Int64}, 1:3, :) with eltype Int64:\n 1  6  11  16\n 2  7  12  17\n 3  8  13  18\n"],"type":"node"}],"type":"node"}],"type":"node"}