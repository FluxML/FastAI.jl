{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"Flux/src/Flux.jl","docid":"sourcefiles/Flux/src/Flux.jl"},{"tag":"sourcefile","title":"Flux/src/layers/show.jl","docid":"sourcefiles/Flux/src/layers/show.jl"},{"tag":"sourcefile","title":"Flux/src/layers/conv.jl","docid":"sourcefiles/Flux/src/layers/conv.jl"}],"methods":[{"line":300,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/conv.jl","method_id":"Flux.ConvTranspose_1","symbol_id":"Flux.ConvTranspose","filedoc":"sourcefiles/Flux/src/layers/conv.jl","signature":"ConvTranspose(k::Tuple{Vararg{Integer, N}}, ch::Pair{<:Integer, <:Integer})"},{"line":300,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/conv.jl","method_id":"Flux.ConvTranspose_2","symbol_id":"Flux.ConvTranspose","filedoc":"sourcefiles/Flux/src/layers/conv.jl","signature":"ConvTranspose(k::Tuple{Vararg{Integer, N}}, ch::Pair{<:Integer, <:Integer}, σ; init, stride, pad, dilation, groups, bias)"},{"line":291,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/conv.jl","method_id":"Flux.ConvTranspose_3","symbol_id":"Flux.ConvTranspose","filedoc":"sourcefiles/Flux/src/layers/conv.jl","signature":"ConvTranspose(w::AbstractArray{T, N})"},{"line":291,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/conv.jl","method_id":"Flux.ConvTranspose_4","symbol_id":"Flux.ConvTranspose","filedoc":"sourcefiles/Flux/src/layers/conv.jl","signature":"ConvTranspose(w::AbstractArray{T, N}, bias)"},{"line":291,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/conv.jl","method_id":"Flux.ConvTranspose_5","symbol_id":"Flux.ConvTranspose","filedoc":"sourcefiles/Flux/src/layers/conv.jl","signature":"ConvTranspose(w::AbstractArray{T, N}, bias, σ; stride, pad, dilation, groups)"},{"line":256,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/conv.jl","method_id":"Flux.ConvTranspose_6","symbol_id":"Flux.ConvTranspose","filedoc":"sourcefiles/Flux/src/layers/conv.jl","signature":"ConvTranspose(σ::F, weight::A, bias::V, stride::Tuple{Vararg{Int64, N}}, pad::Tuple{Vararg{Int64, M}}, dilation::Tuple{Vararg{Int64, N}}, groups::Int64)"}],"name":"ConvTranspose","title":"ConvTranspose","symbol_id":"Flux.ConvTranspose","public":true,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["ConvTranspose(filter, in => out, σ=identity; stride=1, pad=0, dilation=1, [bias, init])\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Standard convolutional transpose layer. ",{"attributes":{},"tag":"code","children":["filter"],"type":"node"}," is a tuple of integers specifying the size of the convolutional kernel, while ",{"attributes":{},"tag":"code","children":["in"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["out"],"type":"node"}," specify the number of input and output channels."],"type":"node"},{"attributes":{},"tag":"p","children":["Note that ",{"attributes":{},"tag":"code","children":["pad=SamePad()"],"type":"node"}," here tries to ensure ",{"attributes":{},"tag":"code","children":["size(output,d) == size(x,d) * stride"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["Parameters are controlled by additional keywords, with defaults ",{"attributes":{},"tag":"code","children":["init=glorot_uniform"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["bias=true"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["See also ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["Conv"],"type":"node"}],"type":"node"}," for more detailed description of keywords."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> xs = rand(Float32, 100, 100, 3, 50);  # a batch of 50 RGB images\n\njulia> layer = ConvTranspose((5,5), 3 => 7, relu)\nConvTranspose((5, 5), 3 => 7, relu)  # 532 parameters\n\njulia> layer(xs) |> size\n(104, 104, 7, 50)\n\njulia> ConvTranspose((5,5), 3 => 7, stride=2)(xs) |> size\n(203, 203, 7, 50)\n\njulia> ConvTranspose((5,5), 3 => 7, stride=3, pad=SamePad())(xs) |> size\n(300, 300, 7, 50)\n"],"type":"node"},{"attributes":{},"tag":"hr","children":[],"type":"node"},{"attributes":{"lang":""},"tag":"codeblock","children":["ConvTranspose(weight::AbstractArray, [bias, activation; stride, pad, dilation, groups])\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Constructs a ConvTranspose layer with the given weight and bias. Accepts the same keywords and has the same defaults as [",{"attributes":{},"tag":"code","children":["ConvTranspose(k::NTuple{N,Integer}, ch::Pair{<:Integer,<:Integer}, σ; ...)"],"type":"node"},"](",{"attributes":{},"tag":"citation","children":[],"type":"node"}," ConvTranspose)."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> weight = rand(3, 4, 5);\n\njulia> bias = zeros(4);\n\njulia> layer = ConvTranspose(weight, bias, sigmoid)\nConvTranspose((3,), 5 => 4, σ)  # 64 parameters\n\njulia> layer(randn(100, 5, 64)) |> size  # transposed convolution will increase the dimension size (upsampling)\n(102, 4, 64)\n\njulia> Flux.params(layer) |> length\n2\n"],"type":"node"}],"type":"node"}],"type":"node"}