{"attributes":{"kind":"function","backlinks":[{"tag":"sourcefile","title":"MLUtils/src/MLUtils.jl","docid":"sourcefiles/MLUtils/src/MLUtils.jl"},{"tag":"sourcefile","title":"FastAI/src/tasks/taskdata.jl","docid":"sourcefiles/FastAI/src/tasks/taskdata.jl"},{"tag":"sourcefile","title":"MLUtils/src/parallel.jl","docid":"sourcefiles/MLUtils/src/parallel.jl"},{"tag":"sourcefile","title":"MLUtils/src/observation.jl","docid":"sourcefiles/MLUtils/src/observation.jl"},{"tag":"sourcefile","title":"MLUtils/src/eachobs.jl","docid":"sourcefiles/MLUtils/src/eachobs.jl"},{"tag":"sourcefile","title":"MLUtils/src/obsview.jl","docid":"sourcefiles/MLUtils/src/obsview.jl"}],"methods":[{"line":107,"file":"/home/runner/.julia/packages/MLUtils/1VpUo/src/observation.jl","method_id":"MLUtils.getobs!_1","symbol_id":"MLUtils.getobs!","filedoc":"sourcefiles/MLUtils/src/observation.jl","signature":"getobs!(buffer::AbstractArray, A::AbstractArray)"},{"line":101,"file":"/home/runner/.julia/packages/MLUtils/1VpUo/src/observation.jl","method_id":"MLUtils.getobs!_2","symbol_id":"MLUtils.getobs!","filedoc":"sourcefiles/MLUtils/src/observation.jl","signature":"getobs!(buffer::AbstractArray, A::AbstractArray{<:Any, N}, idx)"},{"line":139,"file":"/home/runner/.julia/packages/MLUtils/1VpUo/src/observation.jl","method_id":"MLUtils.getobs!_3","symbol_id":"MLUtils.getobs!","filedoc":"sourcefiles/MLUtils/src/observation.jl","signature":"getobs!(buffers::Union{Tuple, NamedTuple}, tup::Union{Tuple, NamedTuple}, indices)"},{"line":157,"file":"/home/runner/.julia/packages/MLUtils/1VpUo/src/observation.jl","method_id":"MLUtils.getobs!_4","symbol_id":"MLUtils.getobs!","filedoc":"sourcefiles/MLUtils/src/observation.jl","signature":"getobs!(buffers, data::Dict, i)"},{"line":189,"file":"/home/runner/.julia/packages/MLUtils/1VpUo/src/obsview.jl","method_id":"MLUtils.getobs!_5","symbol_id":"MLUtils.getobs!","filedoc":"sourcefiles/MLUtils/src/obsview.jl","signature":"getobs!(buffer, subset::ObsView)"},{"line":190,"file":"/home/runner/.julia/packages/MLUtils/1VpUo/src/obsview.jl","method_id":"MLUtils.getobs!_6","symbol_id":"MLUtils.getobs!","filedoc":"sourcefiles/MLUtils/src/obsview.jl","signature":"getobs!(buffer, subset::ObsView, idx)"},{"line":26,"file":"/home/runner/work/FastAI.jl/FastAI.jl/src/tasks/taskdata.jl","method_id":"MLUtils.getobs!_7","symbol_id":"MLUtils.getobs!","filedoc":"sourcefiles/MLUtils/src/tasks/taskdata.jl","signature":"getobs!(buf, ds::FastAI.TaskDataset, idx)"},{"line":67,"file":"/home/runner/.julia/packages/MLUtils/1VpUo/src/observation.jl","method_id":"MLUtils.getobs!_8","symbol_id":"MLUtils.getobs!","filedoc":"sourcefiles/MLUtils/src/observation.jl","signature":"getobs!(buffer, data, idx)"}],"name":"getobs!","title":"getobs!","symbol_id":"MLUtils.getobs!","public":true,"module_id":"MLUtils"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["getobs!(buffer, data, idx)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Inplace version of ",{"attributes":{},"tag":"code","children":["getobs(data, idx)"],"type":"node"},". If this method is defined for the type of ",{"attributes":{},"tag":"code","children":["data"],"type":"node"},", then ",{"attributes":{},"tag":"code","children":["buffer"],"type":"node"}," should be used to store the result, instead of allocating a dedicated object."],"type":"node"},{"attributes":{},"tag":"p","children":["Implementing this function is optional. In the case no such method is provided for the type of ",{"attributes":{},"tag":"code","children":["data"],"type":"node"},", then ",{"attributes":{},"tag":"code","children":["buffer"],"type":"node"}," will be ",{"attributes":{},"tag":"em","children":["ignored"],"type":"node"}," and the result of ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["getobs"],"type":"node"}],"type":"node"}," returned. This could be because the type of ",{"attributes":{},"tag":"code","children":["data"],"type":"node"}," may not lend itself to the concept of ",{"attributes":{},"tag":"code","children":["copy!"],"type":"node"},". Thus, supporting a custom ",{"attributes":{},"tag":"code","children":["getobs!"],"type":"node"}," is optional and not required."],"type":"node"}],"type":"node"}],"type":"node"}