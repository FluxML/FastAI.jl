{"attributes":{"kind":"struct","backlinks":[{"tag":"sourcefile","title":"Flux/src/deprecations.jl","docid":"sourcefiles/Flux/src/deprecations.jl"},{"tag":"sourcefile","title":"Flux/src/layers/basic.jl","docid":"sourcefiles/Flux/src/layers/basic.jl"},{"tag":"sourcefile","title":"Flux/src/layers/normalise.jl","docid":"sourcefiles/Flux/src/layers/normalise.jl"},{"tag":"sourcefile","title":"Flux/src/layers/show.jl","docid":"sourcefiles/Flux/src/layers/show.jl"}],"methods":[{"line":236,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/basic.jl","method_id":"Flux.Scale_1","symbol_id":"Flux.Scale","filedoc":"sourcefiles/Flux/src/layers/basic.jl","signature":"Flux.Scale(s1::Integer, s23::Integer...; bias, init, _act)"},{"line":230,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/basic.jl","method_id":"Flux.Scale_2","symbol_id":"Flux.Scale","filedoc":"sourcefiles/Flux/src/layers/basic.jl","signature":"Flux.Scale(scale::A)"},{"line":230,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/basic.jl","method_id":"Flux.Scale_3","symbol_id":"Flux.Scale","filedoc":"sourcefiles/Flux/src/layers/basic.jl","signature":"Flux.Scale(scale::A, bias::B)"},{"line":230,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/basic.jl","method_id":"Flux.Scale_4","symbol_id":"Flux.Scale","filedoc":"sourcefiles/Flux/src/layers/basic.jl","signature":"Flux.Scale(scale::A, bias::B, σ::F)"},{"line":237,"file":"/home/runner/.julia/packages/Flux/KkC79/src/layers/basic.jl","method_id":"Flux.Scale_5","symbol_id":"Flux.Scale","filedoc":"sourcefiles/Flux/src/layers/basic.jl","signature":"Flux.Scale(size_act...; bias, init)"}],"name":"Scale","title":"Scale","symbol_id":"Flux.Scale","public":false,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["Scale(size::Integer..., σ=identity; bias=true, init=ones32)\nScale(scale::AbstractArray, [bias, σ])\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Create an element-wise layer, whose forward pass is given by:"],"type":"node"},{"attributes":{"lang":""},"tag":"codeblock","children":["y = σ.(scale .* x .+ bias)\n"],"type":"node"},{"attributes":{},"tag":"p","children":["This uses ",{"attributes":{},"tag":"code","children":[".*"],"type":"node"}," instead of matrix multiplication ",{"attributes":{},"tag":"code","children":["*"],"type":"node"}," of ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["Dense"],"type":"node"}],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"p","children":["The learnable scale & bias are initialised ",{"attributes":{},"tag":"code","children":["init(size...)"],"type":"node"}," and ",{"attributes":{},"tag":"code","children":["zeros32(size...)"],"type":"node"},", with ",{"attributes":{},"tag":"code","children":["init=ones32"],"type":"node"}," by default. You may specify the function ",{"attributes":{},"tag":"code","children":["init"],"type":"node"},", turn off trainable bias with ",{"attributes":{},"tag":"code","children":["bias=false"],"type":"node"},", or provide the array(s) explicitly."],"type":"node"},{"attributes":{},"tag":"p","children":["Used by ",{"attributes":{"reftype":"document","href":"@ref","title":"","document_id":"references/@ref"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["LayerNorm"],"type":"node"}],"type":"node"}," with ",{"attributes":{},"tag":"code","children":["affine=true"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> a = Flux.Scale(2)\nScale(2)            # 4 parameters\n\njulia> Flux.params(a)\nParams([Float32[1.0, 1.0], Float32[0.0, 0.0]])\n\njulia> a([1 2 3])\n2×3 Matrix{Float32}:\n 1.0  2.0  3.0\n 1.0  2.0  3.0\n\njulia> b = Flux.Scale([1 2 3 4], false, abs2)\nScale(1, 4, abs2; bias=false)  # 4 parameters\n\njulia> b([1, 10])\n2×4 Matrix{Int64}:\n   1    4    9    16\n 100  400  900  1600\n\njulia> Flux.params(b)\nParams([[1 2 3 4]])\n"],"type":"node"}],"type":"node"}],"type":"node"}