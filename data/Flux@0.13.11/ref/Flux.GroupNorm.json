{"attributes":{"kind":"struct","backlinks":[{"tag":"documentation","title":"hasaffine","docid":"Flux@0.13.11/ref/Flux.hasaffine"},{"tag":"documentation","title":"LayerNorm","docid":"Flux@0.13.11/ref/Flux.LayerNorm"},{"tag":"sourcefile","title":"Flux/outputsize.jl","docid":"Flux@0.13.11/src/outputsize.jl"},{"tag":"sourcefile","title":"Flux/layers/show.jl","docid":"Flux@0.13.11/src/layers/show.jl"},{"tag":"sourcefile","title":"Flux/Flux.jl","docid":"Flux@0.13.11/src/Flux.jl"},{"tag":"sourcefile","title":"Flux/layers/normalise.jl","docid":"Flux@0.13.11/src/layers/normalise.jl"}],"methods":[{"symbol_id":"Flux.GroupNorm","module_id":"Flux","file":"layers/normalise.jl","line":532,"signature":"(::Signature)"},{"symbol_id":"Flux.GroupNorm","module_id":"Flux","file":"layers/normalise.jl","line":515,"signature":"(::Signature)"}],"package_id":"Flux@0.13.11","title":"GroupNorm","symbol_id":"Flux.GroupNorm","exported":true,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{"symbol":"Flux.GroupNorm","line":472,"module":"Flux","file":"layers/normalise.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["GroupNorm(channels::Integer, G::Integer, λ=identity;\n          initβ=zeros32, initγ=ones32,\n          affine=true, track_stats=false,\n          ϵ=1f-5, momentum=0.1f0)\n"],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{"href":"https://arxiv.org/abs/1803.08494","title":""},"tag":"a","children":["Group Normalization"],"type":"node"}," layer."],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["chs"],"type":"node"}," is the number of channels, the channel dimension of your input. For an array of N dimensions, the ",{"attributes":{},"tag":"code","children":["N-1"],"type":"node"},"th index is the channel dimension."],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["G"],"type":"node"}," is the number of groups along which the statistics are computed. The number of channels must be an integer multiple of the number of groups."],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{},"tag":"code","children":["channels"],"type":"node"}," should be the size of the channel dimension in your data (see below)."],"type":"node"},{"attributes":{},"tag":"p","children":["Given an array with ",{"attributes":{},"tag":"code","children":["N > 2"],"type":"node"}," dimensions, call the ",{"attributes":{},"tag":"code","children":["N-1"],"type":"node"},"th the channel dimension. For ",{"attributes":{},"tag":"code","children":["WHCN"],"type":"node"}," images it's the usual channel dimension."],"type":"node"},{"attributes":{},"tag":"p","children":["If ",{"attributes":{},"tag":"code","children":["affine=true"],"type":"node"},", it also applies  a shift and a rescale to the input through to learnable per-channel bias ",{"attributes":{},"tag":"code","children":["β"],"type":"node"}," and scale ",{"attributes":{},"tag":"code","children":["γ"],"type":"node"}," parameters."],"type":"node"},{"attributes":{},"tag":"p","children":["If ",{"attributes":{},"tag":"code","children":["track_stats=true"],"type":"node"},", accumulates mean and var statistics in training phase that will be used to renormalize the input in test phase."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> using Statistics\n\njulia> xs = rand(3, 3, 4, 2);  # a batch of 2 images, each having 4 channels\n\njulia> m = GroupNorm(4, 2);\n\njulia> y = m(xs);\n\njulia> isapprox(std(y[:, :, 1:2, 1]), 1, atol=0.1) && std(xs[:, :, 1:2, 1]) != std(y[:, :, 1:2, 1])\ntrue\n\njulia> isapprox(std(y[:, :, 3:4, 2]), 1, atol=0.1) && std(xs[:, :, 3:4, 2]) != std(y[:, :, 3:4, 2])\ntrue\n"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}