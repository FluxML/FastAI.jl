{"attributes":{"kind":"struct","backlinks":[{"tag":"documentation","title":"dropout","docid":"Flux@0.13.11/ref/Flux.dropout"},{"tag":"sourcefile","title":"FastVision/models/blocks.jl","docid":"FastVision@0.1.1/src/models/blocks.jl"},{"tag":"sourcefile","title":"Flux/Flux.jl","docid":"Flux@0.13.11/src/Flux.jl"},{"tag":"sourcefile","title":"Flux/layers/normalise.jl","docid":"Flux@0.13.11/src/layers/normalise.jl"}],"methods":[{"symbol_id":"Flux.Dropout","module_id":"Flux","file":"layers/normalise.jl","line":101,"signature":"(::Signature)"},{"symbol_id":"Flux.Dropout","module_id":"Flux","file":"layers/normalise.jl","line":94,"signature":"(::Signature)"},{"symbol_id":"Flux.Dropout","module_id":"Flux","file":"layers/normalise.jl","line":99,"signature":"(::Signature)"}],"package_id":"Flux@0.13.11","title":"Dropout","symbol_id":"Flux.Dropout","exported":true,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{"symbol":"Flux.Dropout","line":53,"module":"Flux","file":"layers/normalise.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["Dropout(p; dims=:, rng = default_rng_value())\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Dropout layer."],"type":"node"},{"attributes":{},"tag":"p","children":["While training, for each input, this layer either sets that input to ",{"attributes":{},"tag":"code","children":["0"],"type":"node"}," (with probability ",{"attributes":{},"tag":"code","children":["p"],"type":"node"},") or scales it by ",{"attributes":{},"tag":"code","children":["1 / (1 - p)"],"type":"node"},". To apply dropout along certain dimension(s), specify the ",{"attributes":{},"tag":"code","children":["dims"],"type":"node"}," keyword. e.g. ",{"attributes":{},"tag":"code","children":["Dropout(p; dims = 3)"],"type":"node"}," will randomly zero out entire channels on WHCN input (also called 2D dropout). This is used as a regularisation, i.e. it reduces overfitting during training."],"type":"node"},{"attributes":{},"tag":"p","children":["In the forward pass, this layer applies the ",{"attributes":{"reftype":"symbol","href":"@ref","title":"","document_id":"Flux@0.13.11/ref/Flux.dropout"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["Flux.dropout"],"type":"node"}],"type":"node"}," function. See that for more details."],"type":"node"},{"attributes":{},"tag":"p","children":["Specify ",{"attributes":{},"tag":"code","children":["rng"],"type":"node"}," to use a custom RNG instead of the default. Custom RNGs are only supported on the CPU."],"type":"node"},{"attributes":{},"tag":"p","children":["Does nothing to the input once ",{"attributes":{"reftype":"symbol","href":"@ref","title":"","document_id":"Flux@0.13.11/ref/Flux.testmode!"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["Flux.testmode!"],"type":"node"}],"type":"node"}," is ",{"attributes":{},"tag":"code","children":["true"],"type":"node"},"."],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"jldoctest"},"tag":"codeblock","children":["julia> m = Chain(Dense(1 => 1), Dropout(1));\n\njulia> Flux.trainmode!(m);\n\njulia> y = m([1]);\n\njulia> y == [0]\ntrue\n\njulia> m = Chain(Dense(1000 => 1000), Dropout(0.5));\n\njulia> Flux.trainmode!(m);\n\njulia> y = m(ones(1000));\n\njulia> isapprox(count(==(0), y) / length(y), 0.5, atol=0.1)\ntrue\n"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}