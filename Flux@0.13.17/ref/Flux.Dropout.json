{"attributes":{"kind":"struct","backlinks":[{"tag":"documentation","title":"testmode!","docid":"Flux@0.13.17/ref/Flux.testmode!"},{"tag":"sourcefile","title":"Flux/Flux.jl","docid":"Flux@0.13.17/src/Flux.jl"},{"tag":"sourcefile","title":"Flux/layers/normalise.jl","docid":"Flux@0.13.17/src/layers/normalise.jl"},{"tag":"sourcefile","title":"Flux/layers/attention.jl","docid":"Flux@0.13.17/src/layers/attention.jl"},{"tag":"sourcefile","title":"FastVision/models/blocks.jl","docid":"FastVision@0.1.1/src/models/blocks.jl"}],"methods":[{"symbol_id":"Flux.Dropout","module_id":"Flux","file":"layers/normalise.jl","line":76,"signature":"(::Signature)"},{"symbol_id":"Flux.Dropout","module_id":"Flux","file":"layers/normalise.jl","line":69,"signature":"(::Signature)"},{"symbol_id":"Flux.Dropout","module_id":"Flux","file":"layers/normalise.jl","line":74,"signature":"(::Signature)"}],"package_id":"Flux@0.13.17","title":"Dropout","symbol_id":"Flux.Dropout","exported":true,"module_id":"Flux"},"tag":"documentation","children":[{"attributes":{"symbol":"Flux.Dropout","line":9,"module":"Flux","file":"layers/normalise.jl"},"tag":"docstring","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["Dropout(p; [dims, rng, active])\n"],"type":"node"},{"attributes":{},"tag":"p","children":["Layer implementing ",{"attributes":{"href":"https://arxiv.org/abs/1207.0580","title":""},"tag":"a","children":["dropout"],"type":"node"}," with the given probability. This is used as a regularisation, i.e. to reduce overfitting."],"type":"node"},{"attributes":{},"tag":"p","children":["While training, it sets each input to ",{"attributes":{},"tag":"code","children":["0"],"type":"node"}," (with probability ",{"attributes":{},"tag":"code","children":["p"],"type":"node"},") or else scales it by ",{"attributes":{},"tag":"code","children":["1 / (1 - p)"],"type":"node"},", using the ",{"attributes":{"href":"@ref","title":""},"tag":"a","children":[{"attributes":{},"tag":"code","children":["NNlib.dropout"],"type":"node"}],"type":"node"}," function. While testing, it has no effect."],"type":"node"},{"attributes":{},"tag":"p","children":["By default the mode will switch automatically, but it can also be controlled manually via ",{"attributes":{"reftype":"symbol","href":"@ref","title":"","document_id":"Flux@0.13.17/ref/Flux.testmode!"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["Flux.testmode!"],"type":"node"}],"type":"node"},", or by passing keyword ",{"attributes":{},"tag":"code","children":["active=true"],"type":"node"}," for training mode."],"type":"node"},{"attributes":{},"tag":"p","children":["By default every input is treated independently. With the ",{"attributes":{},"tag":"code","children":["dims"],"type":"node"}," keyword, instead it takes a random choice only along that dimension. For example ",{"attributes":{},"tag":"code","children":["Dropout(p; dims = 3)"],"type":"node"}," will randomly zero out entire channels on WHCN input (also called 2D dropout)."],"type":"node"},{"attributes":{},"tag":"p","children":["Keyword ",{"attributes":{},"tag":"code","children":["rng"],"type":"node"}," lets you specify a custom random number generator. (Only supported on the CPU.)"],"type":"node"},{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":["julia> m = Chain(Dense(ones(3,2)), Dropout(0.4))\nChain(\n  Dense(2 => 3),                        # 9 parameters\n  Dropout(0.4),\n)\n\njulia> m(ones(2, 7))  # test mode, no effect\n3×7 Matrix{Float64}:\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0\n 2.0  2.0  2.0  2.0  2.0  2.0  2.0\n\njulia> Flux.trainmode!(m)  # equivalent to use within gradient\nChain(\n  Dense(2 => 3),                        # 9 parameters\n  Dropout(0.4, active=true),\n)\n\njulia> m(ones(2, 7))\n3×7 Matrix{Float64}:\n 0.0      0.0      3.33333  0.0      0.0      0.0  0.0\n 3.33333  0.0      3.33333  0.0      3.33333  0.0  3.33333\n 3.33333  3.33333  0.0      3.33333  0.0      0.0  3.33333\n\njulia> y = m(ones(2, 10_000));\n\njulia> using Statistics\n\njulia> mean(y)  # is about 2.0, same as in test mode\n1.9989999999999961\n\njulia> mean(iszero, y)  # is about 0.4\n0.4003"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}